<?xml version="1.0" encoding="utf-8"?>
<messages>
	<message>
		<keywords>
			<keyword>for</keyword>
			<keyword>九九乘法</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[用一个for循环打印九九乘法表 ]]></name>
		<body><![CDATA[public void nineNineMulitTable(){     
    for (int i = 1,j = 1; j <= 9; i++) {      
          System.out.print(i+"*"+j+"="+i*j+" ");      
          if(i==j){      
              i=0;    
              j++;    
              System.out.println();      
          }    
      }    
}]]></body>
		<desc>...</desc>
	</message>
	<message>
		<keywords>
			<keyword>Date</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[给定一个java.util.Date对象，如何转化为”2007-3-22 20:23:22”格式的字符串  ]]></name>
		<body><![CDATA[public String date2FormatStr(Date date)   
    {    
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    
      String str = sdf.format(date);    
      return str;    
    } ]]></body>
		<desc>...</desc>
	</message>
	<message>
		<keywords>
			<keyword>二分查找法</keyword>
			<keyword>索引</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[用二分查找法判断任意整数在任意整数数组里面是否存在，若存在就返回它在数组中的索引位置，不存在返回-1 ]]></name>
		<body><![CDATA[public int binarySearch(int[] dataset,int data,int beginIndex,int endIndex){    
   int midIndex = (beginIndex+endIndex)/2;    
   //如果查找的数要比开始索引的数据要小或者是比结束索引的书要大，或者开始查找的索引值大于结束的索引值返回-1没有查到   
   if(data <dataset[beginIndex]||data>dataset[endIndex]||beginIndex>endIndex){     
       return -1;   
   }   
   if(data >dataset[midIndex]){       
       return binarySearch(dataset,data,beginIndex,midIndex-1);      
   }else if(data>dataset[midIndex])      
   {    
       return binarySearch(dataset,data,midIndex+1,endIndex);      
   }else {    
       return midIndex;      
   }    
 }    
    
 /**   
  *二分查找特定整数在整型数组中的位置(非递归)     
  *@param dataset   
  *@param data   
  *@return index   
  */    
  public int binarySearch(int[] dataset ,int data)      
  {    
    int beginIndex = 0;     
    int endIndex = dataset.length - 1;       
    int midIndex = -1;    
    if(data <dataset[beginIndex]||data>dataset[endIndex]||beginIndex>endIndex){     
        return -1;    
    }   
    while(beginIndex <= endIndex) {      
        midIndex = (beginIndex+endIndex)/2;      
        if(data<dataset[midIndex]) {       
           endIndex = midIndex-1;       
        } else if(data>dataset[midIndex]) {       
          beginIndex = midIndex+1;       
        }else {    
          return midIndex;      
        }    
    }    
    return -1;    
  }   
]]></body>
	<desc>...</desc>
	</message>
<message>
		<keywords>
			<keyword>图结构</keyword>
			<keyword>遍历</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[用1、2、2、3、4、5这六个数字，用java写一个main函数，打印出所有不同的排列，如：512234、412345等，要求："4"不能在第三位，"3"与"5"不能相连。]]></name>
		<body><![CDATA[基本思路：
1 把问题归结为图结构的遍历问题。实际上6个数字就是六个结点，把六个结点连接成无向连通图，对于每一个结点求这个图形的遍历路径，所有结点的遍历路径就是最后对这6个数字的排列组合结果集。
2 显然这个结果集还未达到题目的要求。从以下几个方面考虑：
  1. 3，5不能相连：实际要求这个连通图的结点3，5之间不能连通, 可在构造图结构时就满足改条件，然后再遍历图。
  2. 不能有重复: 考虑到有两个2，明显会存在重复结果，可以把结果集放在TreeSet中过滤重复结果
  3. 4不能在第三位: 仍旧在结果集中去除满足此条件的结果。]]></body>
		<desc>...</desc>
	</message>
	<message>
		<keywords>
			<keyword>选择排序</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[选择排序]]></name>
		<body><![CDATA[ public void sort(int[] data) {      
        int temp;    
        for (int i = 0; i 小于 data.length; i++) {      
            int lowIndex = i;      
            for (int j = data.length - 1; j大于 i; j--) {      
                if (data[j] 小于 data[lowIndex]) {      
                    lowIndex = j;    
                }    
            }    
            SortUtil.swap(data,i,lowIndex);      
        }    
    }    
		]]></body>
		<desc>...</desc>
	</message>
<message>
		<keywords>
			<keyword>Shell</keyword>
			<keyword>排序</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[Shell排序]]></name>
		<body><![CDATA[public class ShellSort implements SortUtil.Sort{        
    public void sort(int[] data) {      
        for(int i=data.length/2;i>2;i/=2){      
            for(int j=0;j小于i;j++){      
                insertSort(data,j,i);          }       }      
        insertSort(data,0,1);    }      
    private void insertSort(int[] data, int start, int inc) {      
        int temp;      
        for(int i=start+inc;i小于data.length;i+=inc){      
            for(int j=i;(j大于=inc)双与(data[j]小于data[j-inc]);j-=inc){      
                SortUtil.swap(data,j,j-inc);      
            }       }    }    }   ]]></body>
		<desc>...</desc>
	</message>
	<message>
		<keywords>
			<keyword>冒泡排序</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[冒泡排序]]></name>
		<body><![CDATA[public void sort(int[] data) {      
        int temp;    
        for(int i=0;i小于data.length;i++){      
            for(int j=data.length-1;j大于i;j--){      
                if(data[j]小于data[j-1]){      
                    SortUtil.swap(data,j,j-1);      
                }    
            }    
        }    ]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>设计模式</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[设计模式原则]]></name>
		<body><![CDATA[开闭原则： 一个软件实体应该对扩展开放 对修改闭合。
里氏代换原则： 任何能使用父类的地方一定能使用子类。
依赖倒转原则： 要依赖于抽象 不要依赖于实现。或者是抽象不应该依赖与细节，细节应该依赖于抽象。
合成聚合复用原则： 尽量使用合成聚合而不是继承去实现复用。
迪米特法则： 一个软件实体应该尽可能少的与其它实体发生相互作用。
接口隔离原则： 应当为客户提供尽可能小的单独的接口 而不应该提供大的综合性的接口
]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>设计模式</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[设计模式种类]]></name>
		<body><![CDATA[Java设计模式分为创建模式, 结构模式, 行为模式 3种类型：
Java设计模式之创建模式包括：
Factory,    工厂模式
Singleton,   单例模式
Builder,    建造模式
Prototype,    原型模式
Java设计模式之结构模式包括：
Facade, 门面模式
Decorator, 装饰模式
Composite,    合成模式
Proxy,    代理模式
Adapter,    适配器模式
Bridge,         桥梁模式
Flyweight,       共享元类模式
Java设计模式之行为模式包括：
Chain of responsibleif,    责任链模式
Command,         命令模式
Strategy,            策略模式
Observer,        观察模式
Interpreter ,           解释器模式
Iterator,              迭代模式
Mediator,            中介模式
Memento,           备忘录模式
State,              状态模式
Template,             模板模式
Visitor,             访问者模式
]]></body>
		<desc>...</desc>
	</message>
	<message>
		<keywords>
			<keyword>模板方法</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[模板方法模式]]></name>
		<body><![CDATA[GOF给模板方法（Template Method）模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。这里的算法的结构，可以理解为你根据需求设计出来的业务流程。特定的步骤就是指那些可能在内容上存在变数的环节。
		1) AbstractClass（抽象类）：定义了一到多个的抽象方法，以供具体的子类来实现它们；而且还要实现一个模板方法，来定义一个算法的骨架。该模板方法不仅调用前面的抽象方法，也可以调用其他的操作，只要能完成自身的使命。
　		　2) ConcreteClass（具体类）：实现父类中的抽象方法以完成算法中与特定子类相关的步骤。
		]]></body>
		<desc>...</desc>
	</message>
	<message>
		<keywords>
			<keyword>FACTORY 模式</keyword>
			<keyword>工厂模式</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[FACTORY]]></name>
		<body><![CDATA[—追MM少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是MM爱吃的东西，虽然口味有所不同，但不管你带MM去麦当劳或肯德基，只管向服务员说“来四个鸡翅”就行了。麦当劳和肯德基就是生产鸡翅的Factory 
		工厂模式：客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。 
		]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>建造模式</keyword>
			<keyword>BUILDER</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[建造模式]]></name>
		<body><![CDATA[BUILDER—MM最爱听的就是“我爱你”这句话了，见到不同地方的MM,要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到MM我只要按对应的键，它就能够用相应的语言说出“我爱你”这句话了，国外的MM也可以轻松搞掂，这就是我的“我爱你”builder。（这一定比美军在伊拉克用的翻译机好卖）
		建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。 
		]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>工厂方法模式</keyword>
			<keyword>FACTORY METHOD</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[工厂方法模式]]></name>
		<body><![CDATA[FACTORY METHOD—请MM去麦当劳吃汉堡，不同的MM有不同的口味，要每个都记住是一件烦人的事情，我一般采用Factory Method模式，带着MM到服务员那儿，说“要一个汉堡”，具体要什么样的汉堡呢，让MM直接跟服务员说就行了。       
        工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>原始模型模式</keyword>
			<keyword>PROTOTYPE</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[原始模型模式]]></name>
		<body><![CDATA[PROTOTYPE—跟MM用QQ聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要copy出来放到QQ里面就行了，这就是我的情话prototype了。（100块钱一份，你要不要） 
   原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。 
]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>SINGLETON</keyword>
			<keyword>单例模式</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[单例模式]]></name>
		<body><![CDATA[SINGLETON—俺有6个漂亮的老婆，她们的老公都是我，我就是我们家里的老公Sigleton，她们只要说道“老公”，都是指的同一个人，那就是我(刚才做了个梦啦，哪有这么好的事)        
        单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。 
]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>适配器</keyword>
			<keyword>ADAPTER</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[适配器]]></name>
		<body><![CDATA[ADAPTER—在朋友聚会上碰到了一个美女Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友kent了，他作为我和Sarah之间的Adapter，让我和Sarah可以相互交谈了(也不知道他会不会耍我) 
        适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。 ]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>BRIDGE</keyword>
			<keyword>桥梁模式</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[桥梁模式]]></name>
		<body><![CDATA[BRIDGE—早上碰到MM，要说早上好，晚上碰到MM，要说晚上好；碰到MM穿了件新衣服，要说你的衣服好漂亮哦，碰到MM新做的发型，要说你的头发好漂亮哦。不要问我“早上碰到MM新做了个发型怎么说”这种问题，自己用BRIDGE组合一下不就行了 
	桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>合成模式</keyword>
			<keyword>COMPOSITE</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[合成模式]]></name>
		<body><![CDATA[COMPOSITE—Mary今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件T恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM都会用Composite模式了，你会了没有？ 
 合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。 
]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>装饰模式</keyword>
			<keyword>DECORATOR</keyword>	
		</keywords>
		<type>3</type>
		<name><![CDATA[  装饰模式]]></name>
		<body><![CDATA[DECORATOR—Mary过完轮到Sarly过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上“最好的的礼物，就是爱你的Fita”，再到街上礼品店买了个像框（卖礼品的MM也很漂亮哦），再找隔壁搞美术设计的Mike设计了一个漂亮的盒子装起来……，我们都是Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？ 
	  装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。 ]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>门面模式</keyword>
			<keyword>FACADE</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[门面模式]]></name>
		<body><![CDATA[FACADE—我有一个专业的Nikon相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但MM可不懂这些，教了半天也不会。幸好相机有Facade设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样MM也可以用这个相机给我拍张照片了。 
 门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。 
]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>享元模式</keyword>
			<keyword>FLYWEIGHT</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[享元模式]]></name>
		<body><![CDATA[FLYWEIGHT—每天跟MM发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上MM的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是Flyweight，MM的名字就是提取出来的外部特征，根据上下文情况使用。 
		  享元模式：FLYWEIGHT在拳击比赛中指最轻量级。享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword></keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[PROXY代理模式 ]]></name>
		<body><![CDATA[PROXY—跟MM在网上聊天，一开头总是“hi,你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？”这些话，真烦人，写个程序做为我的Proxy吧，凡是接收到这些话都设置好了自动的回答，接收到其他的话时再通知我回答，怎么样，酷吧。 
代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>责任链模式</keyword>
			<keyword>CHAIN OF RESPONSIBLEITY</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[责任链模式]]></name>
		<body><![CDATA[CHAIN OF RESPONSIBLEITY—晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi,可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了，听说是个老处女呀，快跑! 
 责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接 
 起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受]]></body>
		<desc>...</desc>
	</message>
		<message>
		<keywords>
			<keyword>COMMAND</keyword>
			<keyword>命令模式</keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[命令模式]]></name>
		<body><![CDATA[COMMAND—俺有一个MM家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送COMMAND，就数你最小气，才请我吃面。”，:-( 
命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。 
]]></body>
		<desc>...</desc>
	</message>
<!--	<message>
		<keywords>
			<keyword></keyword>
		</keywords>
		<type>3</type>
		<name><![CDATA[ ]]></name>
		<body><![CDATA[ ]]></body>
		<desc>...</desc>
	</message>  -->	
</messages>