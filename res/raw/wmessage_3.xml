<?xml version="1.0" encoding="utf-8"?>
<messages>
	<message>
		<list_id>3</list_id>
		<name><![CDATA[多线程的优点
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[  可分两方面来答：相对于单线程而言 ：可以响应多任务的并发操作。多线程取消了主循环和轮流检测机制，一个线程可以暂停而不阻止系统其他的部分的执行，而且当程序中一个线程阻塞时，只有那个被阻塞的线程暂停，所有其他的线程继续执行。相对于进程而言：(可以答也可以不答)它所要求的开销比较小，转换成本较小。所有线程共享同一地址空间，相互协作。彼此之间通信很容易
		]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[概述java垃圾回收机制
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[当不存在对一个对象的引用时，我们就假定不再需要那个对象，那个对象所占有的存储单元可以被收回，可通过System.gc()方法回收，但一般要把不再引用的对象标志为null为佳。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[java类是否可以多继承，怎么实现多继承？
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[java没有多继承，但可以通过接口的形式来达到多继承的目地。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[接口有什么优点
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[接口有以下优点：接口只是一个框架而没有实现，因此在接口定义时不需要考虑接口中的方法如何实现。利用接口可达到实现多继承的目地。可以在不暴露对象的类的前提下，暴露对象的编程接口。不用强迫类关系在无关类中截获相似处(采用适配器就可以了)。声明想执行的一个或多个方法]]></answer>
	</message>	
		<message>
		<list_id>3</list_id>
		<name><![CDATA[java是否存在内存泄露
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[存在，当一个对象引用另一对象后，当另一对象为空时，会出现内存泄露]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[String类的值是否可以改变
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[String类的值在初始后不能改变，如果要改变，可转换为StringBuffer类，这个类的值是可以动态改变的。(这里主要考String 和 StringBuffer 的区别)]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Corba概述
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[通用对象请求代理，它的主要目标是解决面向对象的异构应用之间的互操作问题，并提供分布式计算所需的一些其他的服务。ORB是CORBA的核心。CORBA重新调整了客户与服务器之间的关系。客户可以向服务器提出事务请求，同时也可以为下一个请求充当服务器角色。由于CORBA系统引入了中间件的概念，即事件代理，由中间件完成客户机与服务器之间的通信，使得服务器对于客户机的位置相对透明，取消了原有分布式计算机模型中客户机----服务器之间的一一对应关系，CORBA客户机可以在运行时动态获得服务对象的位置，并且可以对多个服务对象提交事务请求，所以它极大的推动了分布计算的发展。另外，CORBA规范约束采用面向对象的分布式方法，以接口定义语言的形式实现对象内部细节的完整封装，从而降低了软件系统的复杂度，增加了软件功能的可重用性。CORBA提供到C C++ JAVA 等高级语言的映射，极大程度地减小了程序设计语言的依赖性。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[toString方法的概述
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[因为每个类都继承了Object类，所以都实现了toString()方法。通过toString()方法可以决定所创建对象的字符串表达形式。]]></answer>
	</message>	
		<message>
		<list_id>3</list_id>
		<name><![CDATA[doGet与doPut的区别？
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[doPut会把地址作为一个文件写到服务器，而doGet不会，而只显示在地址栏。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[多线程实现有那几种方法，同步有哪几种方法？
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[实现同步主要有两种方法：1.synchronized   2.wait notify实现多线程主要继承Thread 类和实现Runnable接口。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[垃圾回收机制,如何优化程序?
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[结束方法 finalize() 可以用来帮助优化对象,该方法在释放对象时被子引用,它是 java 中为了有效地进行垃圾收集而引入的一个特殊方法, finalize() 方法属于 java.lang.Object 的系统类方法,它能被所有类访问, 当一个对象实例已经完全没有被任何变量引用时,则可以对它进行垃圾收集标记,在进行”垃圾收集”之前,系统将自动调用对象的 finalize() 方法,释放对象实例所占用的系统资源.]]></answer>
	</message>	
		<message>
		<list_id>3</list_id>
		<name><![CDATA[== 与 equals  的区别:
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA["==" 比较的是两个对象的引用 (references)，并不是他们的内容.equals(Object) 方法与 "==" 相比的特殊之处就在于它可以覆盖，所以我们可以通过覆盖的办法让它不是比较引用而是比较数据内容。当然 JDK 中也有覆盖过 equals(Object) 方法的类，如 java.lang.String，它就覆盖了从 Object 继承来的的 equals(Object) 方法，用以比较字符串内容是否相同。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[链表和数组的区别
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[创建数组必须明确说明数组的长度,(即数组中元素的个数),以便在内存中留出一块空间存放所有的数组元素,数组中各数据元素在内存中是顺序存放的.创建链表时,不需要给出链表中元素(称为节点)的个数,可以先只创建一个链表头,其他元素在需要时动态地创建并加入到链表,链表的数据无素在内存中不是连续存放的.]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[说说你所熟悉或听说过的j2ee中的几种常用模式?及对设计模式的一些看法
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[Session Facade Pattern：使用SessionBean访问EntityBeanMessage Facade Pattern：实现异步调用EJB Command Pattern：使用Command JavaBeans取代SessionBean，实现轻量级访问Data Transfer Object Factory：通过DTO Factory简化EntityBean数据提供特性Generic Attribute Access：通过AttibuteAccess接口简化EntityBean数据提供特性Business Interface：通过远程（本地）接口和Bean类实现相同接口规范业务逻辑一致性ＥＪＢ架构的设计好坏将直接影响系统的性能、可扩展性、可维护性、组件可重用性及开发效率。项目越复杂，项目队伍越庞大则越能体现良好设计的重要性]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[WEB SERVICE名词解释。JSWDL开发包的介绍。JAXP、JAXM的解释。SOAP、UDDI,WSDL解释。
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[Web Service描述语言WSDLSOAP即简单对象访问协议(Simple Object Access Protocol)，它是用于交换XML编码信息的轻量级协议。UDDI 的目的是为电子商务建立标准；UDDI是一套基于Web的、分布式的、为Web Service提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的Web Service注册，以使别的企业能够发现的访问协议的实现标准。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[BS与CS的联系与区别。
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[C/S 模式, 即客户端( Clinet)和服务器端 (Server)的两层结构模式, 其特点就是主要业务逻辑集中在客户端,因此,也带来了一定的弊端 :a.首先,在安装,调试,维护,升级方面比较因难,  因为每个客户端的配置不同,所以在配置的时候,必须对每个客户端进行配置.b.由于主要业务逻辑集中在客户端,系统的安全受到影响.B/S 模式, 即浏览器端(Browers)和服务器端(Server)的结构模式, 其核心是用浏览器(Browers)取代C/S模式中的客户端。其优点是：a.首先，在维护，升级的时候，只须对服务器端进行维护和升能就可以了。b.由于客户端就是浏览器，有利于系统的安全。]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[解释下面关于J2EE的名词
			]]></name>
		<body><![CDATA[JNDI、JMS、JTA、JAF、RMI
		   ]]></body>
		<answer><![CDATA[(1)JNDI:Java Naming  Directory Interface,JAVA命名目录服务.主要提供的功能是：提供一个目录系统，让其它各地的应用程序在其上面留下自己的索引，从而满足快速查找和定位分布式应用程序的功能.　　(2)JMS：Java Message Service,JAVA消息服务.主要实现各个应用程序之间的通讯.包括点对点和广播.　　(3)JTA：Java Transaction API,JAVA事务服务.提供各种分布式事务服务.应用程序只需调用其提供的接口即可.　　(4)JAF: Java Action FrameWork,JAVA安全认证框架.提供一些安全控制方面的框架.让开发者通过各种部署和自定义实现自己的个性安全控制策略.(5)RMI:Remote Method Interface,远程方法调用]]></answer>
	</message>		
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,打印昨天的当前时刻
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[public class YesterdayCurrent{public void main(String[] args){Calendar cal = Calendar.getInstance();cal.add(Calendar.DATE, -1);System.out.println(cal.getTime());}}]]></answer>
	</message>	
		<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,文件读写,实现一个计数器
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[public int getNum(){int i = -1;try{String stri="";BufferedReader in = new BufferedReader(new FileReader(f));while((stri=in.readLine())!=null){i = Integer.parseInt(stri.trim());}in.close();}catch(Exception e){e.printStackTrace();}return i;}public void setNum(){int i = getNum();i++;try{PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(f,false)));out.write(String.valueOf(i));            // 可能是编码的原因，如果直接写入int的话，将出现java编码和windows编码的混乱，因此此处写入的是Stringout.close() ;}catch(Exception e){e.printStackTrace();}}]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,指出下面程序的运行结果
			]]></name>
		<body><![CDATA[class A {static {System.out.print("1");}public A() {System.out.print("2");}}class B extends A {static {System.out.print("a");}public B() {System.out.print("b");}}public class Hello {public static void main(String[] ars) {A ab = new B();ab = new B();}}
		   ]]></body>
		<answer><![CDATA[A ab = new B(); // 执行到此处,结果: 1a2bab = new B(); // 执行到此处,结果: 1a2bab注:类的static 代码段,可以看作是类首次加载(被虚拟机加载)执行的代码,而对于类的加载,首先要执行其基类的构造,再执行其本身的构造]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,现在输入n个数字，以逗号，分开；然后可选择升或者降序排序；按提交键就在另一页面显示按什么排序，结果为，提供reset
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[import java.util.*;public class bycomma {public static String[] splitStringByComma(String source) {if (source == null || source.trim().equals(""))return null;StringTokenizer commaToker = new StringTokenizer(source, ",");String[] result = new String[commaToker.countTokens()];int i = 0;while (commaToker.hasMoreTokens()) {result[i] = commaToker.nextToken();i++;}return result;}public static void main(String args[]) {String[] s = splitStringByComma("5,8,7,4,3,9,1");int[] ii = new int[s.length];for (int i = 0; i 小于 s.length; i++) {ii[i] = Integer.parseInt(s[i]);}Arrays.sort(ii);// ascfor (int i = 0; i 小于 s.length; i++) {System.out.println(ii[i]);}// descfor (int i = (s.length - 1); i >= 0; i--) {System.out.println(ii[i]);}}}]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,金额转换，阿拉伯数字的金额转换成中国传统的形式如：（￥1011）－>（一千零一拾一元整）输出。
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[public class SimpleMoneyFormat {public static final String EMPTY = "";public static final String ZERO = "零";public static final String ONE = "壹";public static final String TWO = "贰";public static final String THREE = "叁";public static final String FOUR = "肆";public static final String FIVE = "伍";public static final String SIX = "陆";public static final String SEVEN = "柒";public static final String EIGHT = "捌";public static final String NINE = "玖";public static final String TEN = "拾";public static final String HUNDRED = "佰";public static final String THOUSAND = "仟";public static final String TEN_THOUSAND = "万";public static final String HUNDRED_MILLION = "亿";public static final String YUAN = "元";public static final String JIAO = "角";public static final String FEN = "分";public static final String DOT = ".";private static SimpleMoneyFormat formatter = null;private HashMap chineseNumberMap = new HashMap();private HashMap chineseMoneyPattern = new HashMap();private NumberFormat numberFormat = NumberFormat.getInstance();private SimpleMoneyFormat() {numberFormat.setMaximumFractionDigits(4);numberFormat.setMinimumFractionDigits(2);numberFormat.setGroupingUsed(false);chineseNumberMap.put("0", ZERO);chineseNumberMap.put("1", ONE);chineseNumberMap.put("2", TWO);chineseNumberMap.put("3", THREE);chineseNumberMap.put("4", FOUR);chineseNumberMap.put("5", FIVE);chineseNumberMap.put("6", SIX);chineseNumberMap.put("7", SEVEN);chineseNumberMap.put("8", EIGHT);chineseNumberMap.put("9", NINE);chineseNumberMap.put(DOT, DOT);chineseMoneyPattern.put("1", TEN);chineseMoneyPattern.put("2", HUNDRED);chineseMoneyPattern.put("3", THOUSAND);chineseMoneyPattern.put("4", TEN_THOUSAND);chineseMoneyPattern.put("5", TEN);chineseMoneyPattern.put("6", HUNDRED);chineseMoneyPattern.put("7", THOUSAND);chineseMoneyPattern.put("8", HUNDRED_MILLION);}public static SimpleMoneyFormat getInstance() {if (formatter == null)formatter = new SimpleMoneyFormat();return formatter;}public String format(String moneyStr) {checkPrecision(moneyStr);String result;result = convertToChineseNumber(moneyStr);result = addUnitsToChineseMoneyString(result);return result;}public String format(double moneyDouble) {return format(numberFormat.format(moneyDouble));}public String format(int moneyInt) {return format(numberFormat.format(moneyInt));}public String format(long moneyLong) {return format(numberFormat.format(moneyLong));}public String format(Number moneyNum) {return format(numberFormat.format(moneyNum));}private String convertToChineseNumber(String moneyStr) {String result;StringBuffer cMoneyStringBuffer = new StringBuffer();for (int i = 0; i 小于 moneyStr.length(); i++) {cMoneyStringBuffer.append(chineseNumberMap.get(moneyStr.substring(i, i + 1)));}// 拾佰仟万亿等都是汉字里面才有的单位，加上它们int indexOfDot = cMoneyStringBuffer.indexOf(DOT);int moneyPatternCursor = 1;for (int i = indexOfDot - 1; i > 0; i--) {cMoneyStringBuffer.insert(i, chineseMoneyPattern.get(EMPTY+ moneyPatternCursor));moneyPatternCursor = moneyPatternCursor == 8 ? 1: moneyPatternCursor + 1;}String fractionPart = cMoneyStringBuffer.substring(cMoneyStringBuffer.indexOf("."));cMoneyStringBuffer.delete(cMoneyStringBuffer.indexOf("."),cMoneyStringBuffer.length());while (cMoneyStringBuffer.indexOf("零拾") != -1) {cMoneyStringBuffer.replace(cMoneyStringBuffer.indexOf("零拾"),cMoneyStringBuffer.indexOf("零拾") + 2, ZERO);}while (cMoneyStringBuffer.indexOf("零佰") != -1) {cMoneyStringBuffer.replace(cMoneyStringBuffer.indexOf("零佰"),cMoneyStringBuffer.indexOf("零佰") + 2, ZERO);}while (cMoneyStringBuffer.indexOf("零仟") != -1) {cMoneyStringBuffer.replace(cMoneyStringBuffer.indexOf("零仟"),cMoneyStringBuffer.indexOf("零仟") + 2, ZERO);}while (cMoneyStringBuffer.indexOf("零万") != -1) {cMoneyStringBuffer.replace(cMoneyStringBuffer.indexOf("零万"),cMoneyStringBuffer.indexOf("零万") + 2, TEN_THOUSAND);}while (cMoneyStringBuffer.indexOf("零亿") != -1) {cMoneyStringBuffer.replace(cMoneyStringBuffer.indexOf("零亿"),cMoneyStringBuffer.indexOf("零亿") + 2, HUNDRED_MILLION);}while (cMoneyStringBuffer.indexOf("零零") != -1) {cMoneyStringBuffer.replace(cMoneyStringBuffer.indexOf("零零"),cMoneyStringBuffer.indexOf("零零") + 2, ZERO);}if (cMoneyStringBuffer.lastIndexOf(ZERO) == cMoneyStringBuffer.length() - 1)cMoneyStringBuffer.delete(cMoneyStringBuffer.length() - 1,cMoneyStringBuffer.length());cMoneyStringBuffer.append(fractionPart);result = cMoneyStringBuffer.toString();return result;}private String addUnitsToChineseMoneyString(String moneyStr) {String result;StringBuffer cMoneyStringBuffer = new StringBuffer(moneyStr);int indexOfDot = cMoneyStringBuffer.indexOf(DOT);cMoneyStringBuffer.replace(indexOfDot, indexOfDot + 1, YUAN);}}]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,在控制台中输入一个字符串，然后按照逆序打印出来
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[public class test {public static void main(String args[]){String A="";String B="";String C="";try{BufferedReader br=new BufferedReader(new InputStreamReader(System.in));if ((B=br.readLine())!=null){A=A+B;}for(int I=str.length()-1;I>=0;I--){C=C+A.substring(I,I+1);}System.out.println(C);}catch(Exception e){System.out.println(e.getMessage());}}}]]></answer>
	</message>	
	<message>
		<list_id>3</list_id>
		<name><![CDATA[Java编程,编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串。 但是要保证汉字不被截半个，如“我ABC”4，应该截为“我AB”，输入“我ABC汉DEF”，6，应该输出为“我ABC”而不是“我ABC+汉的半个”。
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[class SplitString {String SplitStr;int SplitByte;public SplitString(String str, int bytes) // 带参数的构造函数,给类变量赋初值{SplitStr = str;SplitByte = bytes;System.out.println("The String is:′" + SplitStr + "′;SplitBytes="+ SplitByte);}public void SplitIt(){int loopCount;loopCount=(SplitStr.length()%SplitByte==0)?(SplitStr.length()/SplitByte):(SplitStr.length()/SplitByte+1);System.out.println("Will Split into "+loopCount);for (int i=1;i小于=loopCount ;i++ ){if (i==loopCount){System.out.println(SplitStr.substring((i-1)*SplitByte,SplitStr.length()));} else {System.out.println(SplitStr.substring((i-1)*SplitByte,(i*SplitByte)));}}}public static void main(String[] args) {SplitString ss = new SplitString("test中dd文dsaf中男大3443n中国43中国人 0ewldfls=103", 4);ss.SplitIt();}}]]></answer>
	</message>
	<message>
		<list_id>3</list_id>
		<name><![CDATA[HTTP 的请求过程
			]]></name>
		<body><![CDATA[
		   ]]></body>
		<answer><![CDATA[当点击一个链接时,浏览器首先找到站点的IP地址,这是通过DNS来实现的,在找到IP地址后就可以建立TCP连接了,连接建立后我们就可以发送请求了。但这个请求是什么样子的呢 ? 我们现在假设点击了一个从 www.webmonkey.com/HTML/96/47/Index2A , HTML 点击了WWW.GRIPY.ORG/MATTARG/  这时浏览器会发出下面的请求:Get/MATTARG/HTML/1.0User-Agent: Mozilla/2.0(macitosh;1;PPC)Accept: text/html: */*Cookie: name = valueRefetet: http://www.webmonkey.com/html/96/47/index2a.htmlHost: www.gtippy.org第一行称为请求,它告诉服务器从MATTMARG 取得文件,这是的目录一般是要加 / 的,下面几行通知服务器你所使用的浏览器是什么类型,你所接收的数据是什么类型,如果你以前访问过这个站点,站点可能向你发送了Cookie ,如果你已经有了一个这样的 Cookie ,浏览器会将这个 Cookie 返回给服务器, referer 行通知服务器用户从哪一页到达此页的。下面服务器就要返回文件了,每次服务器返回文件时,都要返回一个 Http/1.0 响应,同进带有状态码,在此之后是述内部的头信息,下面就是一个响应:HTTP/1.0 200 PoundData: Mon 10 Feb 1997 23:48:22 GMTServer: Apache/1.1 1 Hotired/1.0Content-type: text/htmlLast-Moditied: Tues,11 Feb 1997 22:45:55 GMT不同的数据可能返回不同的Content-type ，因此不同的内容需要不同的 Content-type ，因此有时候这个过程是很慢的。]]></answer>
	</message>
</messages>